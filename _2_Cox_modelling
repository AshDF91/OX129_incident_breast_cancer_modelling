
******************************************************************************** 
*                          1) Fractional polynomials                           * 
******************************************************************************** 

* Open imputed dataset - missing values for BMI, Townsend, alcohol and smoking imputed *  
use "\\data\final_datasets\Endpoint_1\OX129_endpoint1_imputed.dta", clear  

* Endpoints defined in data prep - tab here for reference *  
tab endpoint  
summ time, det  

* Stset the data, stop follow-up at 10 years as seeking 10-year prediction horizon *  
mi stset time, failure(endpoint==1) exit(time 10) 

* Run the FP selection process - mfp approach. Optimal functional forms in complete case data *  
timer on 1  
mfp, all: stcox age baseline_bmi town_int 
timer off 1 
timer list  
timer clear  

* Note: non-linear terms selected for age and BMI; will leave Townsend score linear *  
* Plot fractional polynomial terms obtained *   
stcox Iage* 
predict age_hr, hr  
twoway fpfitci age_hr age, graphregion(color(white)) leg(off) xtitle("Age at cohort entry", size(medium)) ytitle("Hazard ratio", size(medium))  
graph save "Graph" "\\graphs\ep1_cox\FP_age_cox_EP1.gph", replace  
drop age_hr  

stcox Ibase*    // baseline BMI 
predict bmi_fp, hr  
twoway fpfitci bmi_fp baseline_bmi, graphregion(color(white)) leg(off) xtitle("Baseline BMI at cohort entry", size(medium)) ytitle("Hazard ratio", size(medium))  
graph save "Graph" "\\graphs\ep1_cox\FP_bmi_cox_EP1.gph", replace  
drop bmi_fp  

clear  
******************************************************************************** 
 

******************************************************************************** 
*              2) Fit full model - perform predictor selection                 * 
******************************************************************************** 
use "\\data\final_datasets\Endpoint_1\OX129_endpoint1_imputed.dta", clear  

* Repeat here to be wasserdicht *  
mi stset time, failure(endpoint==1) exit(time 10) 

* Generate FP terms in imputed datasets - use data obtained from mfp in the outputs above *  
mi passive: gen bmi_x = (exp(ln_bmi))/10  
gen age_x = age/10  
mi passive: gen double bmi_fp1 = (bmi_x^-2) - 0.15531752                  // make in each imputation
mi passive: gen double bmi_fp2 = ((bmi_x^-2) * ln(bmi_x)) - 0.1446226461  // make in each imputation 

rename Iage__1 age_fp1 
rename Iage__2 age_fp2 

* Fit full model with all candidate predictors, then select those associated  
* with an exponentiated coefficient (HR) > 1.1 or <0.9, with p<0.01 * 
cd "\\models\Endpoint_1\"  
timer clear  
timer on 1  
* Define global for all variables in case multilpy typed out * 
global stcox_covars = "age_fp* bmi_fp* town_int i.ethnicity i.fibrocystic i.endometriosis i.pcos  //
i.hysterectomy i.previous_gynae_cancer i.ocp i.recent_oestrogen i.past_oestrogen i.recent_combined  //
i.past_combined i.fh_breastca i.fh_gynaeca i.lungca i.bloodca i.thyroidca i.alcohol_cat6 i.smoke_cat //
i.type1dm i.type2dm i.ckd i.htn i.ihd i.cirrhosis i.lupus i.vasculitis i.psychosis i.anti_psychotic //
i.thiazide i.betablocker i.raa i.acei i.cablocker i.tca i.maoi i.ssri c.age_fp1##i.fh_breastca // 
c.age_fp2##i.fh_breastca c.age_fp*##c.bmi_fp*" 

* Fit the model * 
mi estimate, dots eform: stcox $stcox_covars  
parmest, list(,) saving(Cox_endpoint1_parmest_preselection.dta, replace) eform label for(estimate min95 max95)  
timer off 1  
timer list  

* Re-run with selected predictors to form final model *  
global selected_covars_cox = "age_fp* bmi_fp* i.fibrocystic i.endometriosis i.pcos i.hysterectomy i.previous_gynae_cancer  //
i.ocp i.recent_oestrogen i.past_oestrogen i.recent_combined i.past_combined i.fh_breastca i.fh_gynae i.lung_ca i.bloodca //
i.thyroidca i.alcohol_cat6 i.type1dm i.type2dm i.vasculitis i.psychosis i.anti_psychotic i.age_fp2##i.fh_breastca" 

mi estimate, dots eform: stcox $selected_covars_cox  

 
* Save the coefs and exponentiated coefs for plotting later * 
parmest, list(,) saving(Cox_endpoint1_parmest_final_coefs.dta, replace) label for(estimate min95 max95)  
parmest, list(,) saving(Cox_endpoint1_parmest_final_hr.dta, replace) eform label for(estimate min95 max95) 

* Estimate baseline survival function at 10 years to 'complete' the model * 
mi query   
local M = r(M)       // M = number of imputed datasets 
scalar base_surv = 0  // Set up empty scalar. Will loop over each imputation, estimate baseline function
mi xeq 1/`M': qui stcox $selected_covars_cox ; qui predict double basesurv, basesurv ; summ basesurv if _t<=10; scalar base_surv = base_surv + r(min) 
scalar base_surv = base_surv/`M'  
disp as txt "Pooled baseline survivor function over imputations = " as res base_surv  
gen baseline_surv_cox = base_surv 
summ baseline_surv_cox 
 
******************************************************************************** 
******************************************************************************** 

******************************************************************************** 
*                 3) Internal-external cross-validation run                    * 
******************************************************************************** 
********************** 
* Preparing for IECV *  
********************** 
* Need to generate a measure of FU time from entry to earliest of: 
* event/competing event/censoring/end of period 1/end of study *  

gen fu_start = enter3     // cohort entry date 
format fu_start %td 
gen fu_end = .  

gen timesplit = mdy(01,01,2010) // The cut-off between Period 1 nand Period 2 for IECV
format timesplit %td 
tab period, m     // number of people entering cohort in each time period (Period 1 or 2) 

replace fu_end = min(exit3date, timesplit) if period==1  // Truncate follow-up at timesplit if needed. Otherwise, if exit date is before this, leave it 
replace fu_end = exit3date if period==2   // If in period 2, cannot spill follow-up nito next period... so leave exit date as is. 
format fu_end %td  

gen follow_up = fu_end-fu_start    // duration of follow-up in IECV setting 
summ follow_up, det  
 
* Overall even counts, any time in study period *  
tab endpoint  

* Generate new event indicator for IECV - event only counts if within the period in which they entered *
* IECV is emulating two wholly distinct datasets * 
gen iecv_event = 0  
replace iecv_event = 1 if period==1 & endpoint==1 & exit3date<timesplit  // entered in P1, had incident breast ca, and that happened during P1  
replace iecv_event = 1 if period==2 & endpoint==1     // entered in P2, and diagnosed with breast ca before end of study period 

replace iecv_event = 2 if period==1 & endpoint==2 & exit3date<timesplit    // entered P1, died of other cause, and that death occurred during P1  
replace iecv_event = 2 if period==2 & endpoint==2  // entered in P2, died of other cause before end of follow-up

tab period  
tab iecv_event  
tab period iecv_event  

* quick quality checks *  
tab endpoint if period==1  
tab iecv_event if period==1  
tab iecv_event if period==2 

* Estimate baseline survival function in period 1 data- used for later computation 
* of predicted risks in Period 2 by combining with linear predictors from IECV * 
* Same system as above - want to emulate distinct cohorts * 

replace follow_up = follow_up/365.25 
mi stset follow_up if period==1, failure(iecv_event==1) exit(time 10) 
mi query  
local M = r(M) 
scalar period1_base_surv = 0  
mi xeq 1/`M': qui stcox $selected_covars_cox ; qui predict double basesurv, basesurv ; summ basesurv if _t<=10; scalar period1_base_surv = period1_base_surv + r(min) 
scalar period1_base_surv = period1_base_surv/`M'  
disp as txt "Pooled baseline survivor function over imputations = " as res period1_base_surv  
gen period1_baseline_surv_cox = period1_base_surv 
summ period1_baseline_surv_cox   

* stset the data for the IECV - take into account the event and time *  
mi stset follow_up, failure(iecv_event==1) exit(time 10)            // 10-yr prediction horizon

************ 
* Run IECV * 
************  

* Save dataset, then convert to flong format so that imputation-specific linear  
* predictor are kept (storecompleted option) *  
save "\\data\final_datasets\Endpoint_1\OX129_endpoint1_imputed_IECV.dta", replace  
mi convert flong  

* Generate new variables in which to store held out predictions*  
* Want to keep linear predictor (can be converted into HR later) * 
* Then, we can use them for the pooled overall metrics, but also to calculate centre-specific estimates *   
gen iecv_xb = .   

* Loop over each region, fit model, make predictions in the held out region's data. *  
cd "\\estimates\" 

* Run the IECV loop *   
timer clear  
timer on 2  

forval x = 1(1)10 {  
mi estimate, dots saving(myestiecv_ep1cox, replace): stcox $selected_covars_cox if (sha1!=`x' & period==1) 
mi predict double xb if (sha1==`x' & period==2) using myestiecv_ep2cox, xb storecompleted  
replace iecv_xb = xb if iecv_xb==.  
drop xb  
display `x' 
} 

timer off 2  
timer list  

summ iecv_xb, det   // distribution of linear predictors 
count if iecv_xb==. // number of missings equals the number of people in Period 1   

tab period  
keep if period==2   // save memory, only keep 'validation data' 

* Save updated dataset: save predictions, and then can use for the model evaluation*  
save "\\data\final_datasets\Endpoint_2\OX129_endpoint1_imputed_IECV.dta" , replace 
clear  

******************************************************************************** 
******************************************************************************** 
